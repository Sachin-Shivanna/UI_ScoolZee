{"version":3,"file":"static/js/1937.9cc2c25d.chunk.js","mappings":"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","sources":["pages/users/newUser/NewUserStyle.js","pages/users/newUser/NewUser.js"],"sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles(theme => ({\n    gridElement: {\n        margin: '15px 0px',\n        display: 'flex',\n        padding: '0px 20px 0px 0px',\n        [theme.breakpoints.down('sm')]: {\n            padding: '0px 0px 15px 0px !important',\n            margin: 0\n        }\n    },\n    hideButtons: {\n        [theme.breakpoints.down('sm')]: {\n            display: 'none'\n        }\n    },\n    header: {\n        backgroundColor: '#101F33',\n        padding: '5px',\n        color: theme.palette.common.white,\n        marginTop: '15px'\n    },\n    profileSelect: {\n        '& .MuiMenu-paper': {\n            top: '46% !important'\n        },\n    },\n    checkboxDesign: {\n        padding: 0,\n        '& .MuiCheckbox-root': {\n            padding: '0PX !important'\n        }\n    },\n    addressLine: {\n        [theme.breakpoints.down('xs')]: {\n            width: '50%'\n        }\n    },\n    inputDesign: {\n        fontSize: '1rem',\n        fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", 'sans-serif'],\n        fontWeight: '400',\n        lineHeight: \"1.5\",\n        padding: '3px 5px 7px !important',\n        letterSpacing: '0.00938em',\n        '& .MuiInputBase-input': {\n            width: 10,\n            padding: '3px 5px 7px !important'\n        },\n        [theme.breakpoints.down('sm')]: {\n            padding: '5px 10px 0px 7px',\n            '& .MuiInputBase-input': {\n                padding: '2px 0 7px'\n            }\n        },\n\n    },\n    autoComplete: {\n        '& .MuiFormControl-root': {\n            bottom: 21,\n            marginLeft: 5\n        }\n    },\n    dateDesign: {\n        '& .MuiInputBase-root': {\n            '& .MuiInputBase-input': {\n                padding: '3px 5px 7px !important'\n            }\n        }\n    },\n    grid: {\n        flex: 1,\n        flexDirection: 'row',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'column',\n            padding: '10px'\n        }\n    },\n    label: {\n        fontSize: '1rem',\n        fontFamily: [\"Roboto\", \"Helvetica\", \"Arial\", 'sans-serif'],\n        fontWeight: '400',\n        lineHeight: \"1.5\",\n        letterSpacing: '0.00938em',\n        color: theme.palette.grey[700],\n        '& .MuiTypography-body1': {\n            fontSize: '1.3rem !important',\n        },\n        [theme.breakpoints.down('sm')]: {\n            fontSize: '1rem !important',\n            padding: '7px 10px 0px 7px',\n            '& .MuiTypography-body1': {\n                fontSize: '1rem !important',\n            },\n        }\n    },\n    modalDesign: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: '95%',\n        '& > box-116': {\n            margin: '0px',\n            maxWidth: '0px'\n        },\n        backgroundColor: 'white',\n        padding: '15px'\n    }\n}))","import { Box, Button, Container, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, MenuItem, TextField, Typography } from '@material-ui/core';\nimport axios from 'axios';\nimport WarningRoundedIcon from '@mui/icons-material/WarningRounded';\nimport toast, { Toaster } from \"react-hot-toast\";\nimport React, { useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Loading from '../../../components/loading/Loading';\nimport { useStyles } from './NewUserStyle';\nimport { Checkbox, Modal } from '@mui/material';\nimport UserDetail from '../userDetail/UserDetail';\n\nconst NewUser = () => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    let unmounted = false;\n\n    const [isPageLoading, setisPageLoading] = React.useState(false);\n    const [isPageLoadingFailed, setisPageLoadingFailed] = React.useState(false);\n    const [invalidList, setInvalidList] = React.useState([]);\n    const [userDetail, setUserDetail] = React.useState({ dob: new Date('2015-01-01T21:11:54') });\n    const [userAddress, setUserAddress] = React.useState({});\n    const [profileList, setProfileList] = React.useState([]);\n    const [createOneMore, setCreateOneMore] = React.useState(false);\n    const [duplicateUser, setDuplicateUser] = React.useState(false);\n    const [fullUserDetails, setFullUserDetails] = React.useState({});\n    const [fullCaregiverDetails, setFullCaregiverDetails] = React.useState({});\n    const [showDuplicateUser, setshowDuplicateUser] = React.useState(false);\n    const [duplicateUserId, setDuplicateUserId] = React.useState('');\n    const [allClasses, setAllClasses] = React.useState([]);\n    const [caregiverDetail, setCaregiverDetail] = React.useState({});\n    const [caregiverAddress, setCaregiverAddress] = React.useState({});\n    const [isSameAddress, setIsSameAddress] = React.useState(false)\n    const [showExistingCaregiver, setShowExistingCaregiver] = React.useState(false)\n    const [findCaregiverEmail, setFindCaregiverEmail] = React.useState('');\n    const [existingCareTaker, setExistingCareTaker] = React.useState(false);\n    const [countryDetails, setCountryDetails] = React.useState([]);\n    const [selectedCountry, setSelectedCountry] = React.useState({});\n    const [selectedCaregiverCountry, setSelectedCaregiverCountry] = React.useState({})\n\n\n    useEffect(() => {\n        getAllProfiles()\n        getAllClasses();\n        getCountryDetails();\n    }, []);\n\n    useEffect(() => {\n        if (fullUserDetails.address) {\n            initiateInsertUser()\n        }\n    }, [fullUserDetails]);\n\n    useEffect(() => {\n        // console.log(countryDetails.find(country => country.iso3 === 'IND'))\n        setSelectedCountry(countryDetails.find(country => country.iso3 === 'IND'));\n        setSelectedCaregiverCountry(countryDetails.find(country => country.iso3 === 'IND'));\n    }, [countryDetails])\n\n\n    const getCountryDetails = async () => {\n        setisPageLoading(true);\n        unmounted = false;\n        const source = axios.CancelToken.source();\n        await axios.get(`${process.env.REACT_APP_SERVER}/country-details`)\n            .then((countryInfo) => {\n                //console.log(countryInfo.data[100]);\n                let tempCountryList = [];\n                countryInfo.data.forEach(country => {\n                    tempCountryList.push(country);\n                });\n                setCountryDetails(tempCountryList)\n            })\n            .catch((error) => {\n                console.log(error);\n                if (!unmounted) {\n                    toast.error('Failed to get location options!');\n                }\n                setisPageLoadingFailed(true);\n            })\n            .finally(() => {\n                setisPageLoading(false);\n                return function () {\n                    unmounted = true;\n                    source.cancel(\"Cancelling in cleanup\");\n                };\n            })\n    }\n\n    const getAllClasses = async () => {\n        setisPageLoading(true);\n        setProfileList([]);\n        unmounted = false;\n        const source = axios.CancelToken.source();\n        await axios.get(`${process.env.REACT_APP_SERVER}/classes-info`)\n            .then((response) => {\n                if (response.status === 200) {\n                    let classData = [];\n                    response.data.forEach(classRec => {\n                        classData.push({ label: classRec.name, id: classRec._id, sections: getClassSection(classRec.divisions) });\n                    });\n                    setUserDetail({ ...userDetail, class: 'None' });\n                    setAllClasses([{ label: 'None', id: 'None', sections: ['None'] }, ...classData]);\n                }\n            })\n            .catch((error) => {\n                if (!unmounted) {\n                    if (error.request.status === 403) {\n                        localStorage.removeItem('userDetail');\n                        localStorage.removeItem('userToken');\n                        localStorage.removeItem('activeSubscription');\n                        history.replace('/login');\n                        history.go(0);\n                    }\n                }\n                setisPageLoadingFailed(true);\n            })\n            .finally(() => {\n                //setisPageLoading(false);\n                return function () {\n                    unmounted = true;\n                    source.cancel(\"Cancelling in cleanup\");\n                };\n            });\n    }\n\n    const getClassSection = (divisions) => {\n        let sections = ['A'];\n        for (let i = 1; i < divisions.length; i++) {\n            sections = [...sections, String.fromCharCode(sections[i - 1].charCodeAt(0) + 1)]\n        }\n        return sections;\n    }\n\n    const getAllProfiles = async () => {\n        setisPageLoading(true);\n        setProfileList([]);\n        unmounted = false;\n        const source = axios.CancelToken.source();\n        await axios.get(`${process.env.REACT_APP_SERVER}/all-profiles`)\n            .then((response) => {\n                setUserDetail({ ...userDetail, profile: response.data[0]._id });\n                setProfileList(response.data);\n            })\n            .catch((error) => {\n                if (!unmounted) {\n                    if (error.request.status === 403) {\n                        localStorage.removeItem('userDetail');\n                        localStorage.removeItem('userToken');\n                        localStorage.removeItem('activeSubscription');\n                        history.replace('/login');\n                        history.go(0);\n                    }\n                }\n                setisPageLoadingFailed(true);\n            })\n            .finally(() => {\n                //setisPageLoading(false);\n                return function () {\n                    unmounted = true;\n                    source.cancel(\"Cancelling in cleanup\");\n                };\n            });\n    }\n\n    const getCaregiverByEmail = async () => {\n        if (!findCaregiverEmail || !findCaregiverEmail?.match(/\\S+@\\S+\\.\\S+/)) {\n            toast.error('Invalid Email Address')\n            return;\n        }\n        //setisPageLoading(true);\n        unmounted = false;\n        const source = axios.CancelToken.source();\n        await axios.get(`${process.env.REACT_APP_SERVER}/caregiver-by-email/${findCaregiverEmail}`)\n            .then((response) => {\n                console.log(response.data)\n                if (response.data === null || JSON.stringify(response.data) === JSON.stringify({})) {\n                    toast.error(`No Caregiver registered with the email address: ${findCaregiverEmail}`)\n                    return\n                }\n\n                let { address, ...caregiverDetails } = response.data;\n\n                setUserDetail({ ...userDetail, profile: profileList.find(profile => profile.name === 'Student')._id })\n\n                setCaregiverAddress({ ...address });\n\n                setCaregiverDetail({ ...caregiverDetails });\n\n                setExistingCareTaker(true)\n\n                setIsSameAddress(false)\n\n            })\n            .catch((error) => {\n                console.log(error)\n                if (!unmounted) {\n                    if (error.request?.status === 403) {\n                        localStorage.removeItem('userDetail');\n                        localStorage.removeItem('userToken');\n                        localStorage.removeItem('activeSubscription');\n                        history.replace('/login');\n                        history.go(0);\n                    }\n                }\n                setisPageLoadingFailed(true);\n            })\n            .finally(() => {\n                setShowExistingCaregiver(false)\n                return function () {\n                    unmounted = true;\n                    source.cancel(\"Cancelling in cleanup\");\n                };\n            });\n\n    }\n\n\n    const handleuserAddressLine1Change = (addressLine1) => {\n        setUserAddress({\n            ...userAddress,\n            addressLine1: addressLine1.target.value\n        });\n    }\n    const handleuserAddressLine2Change = (addressLine2) => {\n        setUserAddress({\n            ...userAddress,\n            addressLine2: addressLine2.target.value\n        });\n    }\n    const handleUserCityChange = (city) => {\n        setUserAddress({\n            ...userAddress,\n            city: city.target.value\n        });\n    }\n    const handleUserDistrictChange = (district) => {\n        setUserAddress({\n            ...userAddress,\n            district: district.target.value\n        });\n    }\n    const handleUserStateChange = (state) => {\n        setUserAddress({\n            ...userAddress,\n            state: state.value\n        });\n    }\n    const handleUserCountryChange = (country) => {\n        setSelectedCountry(country)\n        setUserAddress({\n            ...userAddress,\n            country: country.name\n        });\n    }\n    const handleUserZipCodeChange = (zipCode) => {\n        setUserAddress({\n            ...userAddress,\n            zipCode: zipCode.target.value\n        });\n    }\n\n    const handleSave = async (createNewUser) => {\n        if (validate()) {\n            setFullUserDetails({ ...userDetail, address: userAddress, profile: userDetail.profile ? userDetail.profile : profileList[0]?._id });\n            setFullCaregiverDetails({ ...caregiverDetail, ...caregiverAddress })\n            setCreateOneMore(createNewUser);\n        }\n    }\n\n    const validate = () => {\n        let isValid = true;\n        let tempInvalidList = [];\n        if (!userDetail.name) {\n            tempInvalidList.push('name');\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile !== profileList.find(profile => profile.name === 'Student')?._id && !userDetail.phone1) {\n            tempInvalidList.push('phone');\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile !== profileList.find(profile => profile.name === 'Student')?._id && /[a-zA-Z]/g.test(userDetail.phone1)) {\n            tempInvalidList.push('phoneInvalid');\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile !== profileList.find(profile => profile.name === 'Student')?._id && userDetail.phone1?.length !== 10) {\n            tempInvalidList.push('phoneInvalid');\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile !== profileList.find(profile => profile.name === 'Student')?._id && !userDetail.email) {\n            tempInvalidList.push('email');\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && userDetail.class === 'None') {\n            tempInvalidList.push('class');\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && (!userDetail.section || userDetail.section === 'None' || userDetail.section === '')) {\n            tempInvalidList.push('section');\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile !== profileList.find(profile => profile.name === 'Student')?._id && !userDetail.email?.match(/\\S+@\\S+\\.\\S+/)) {\n            tempInvalidList.push('emailInvalid');\n            isValid = false;\n        }\n        if (!userAddress.addressLine1) {\n            tempInvalidList.push('addrLine1');\n            isValid = false;\n        }\n        if (!userAddress.city) {\n            tempInvalidList.push('city');\n            isValid = false;\n        }\n        if (!userAddress.district) {\n            tempInvalidList.push('district');\n            isValid = false;\n        }\n        if (!userAddress.state) {\n            tempInvalidList.push('state');\n            isValid = false;\n        }\n        if (!userAddress.country) {\n            tempInvalidList.push('country');\n            isValid = false;\n        }\n        if (!userAddress.zipCode) {\n            tempInvalidList.push('pinCode');\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && JSON.stringify(caregiverDetail) === JSON.stringify({})) {\n            toast.error('Caregiver details are required for Students')\n            isValid = false;\n        }\n        else if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && JSON.stringify(caregiverAddress) === JSON.stringify({})) {\n            toast.error('Caregiver address are required for Students')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverDetail.name) {\n            tempInvalidList.push('caregiverName')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverDetail.email) {\n            tempInvalidList.push('caregiverEmail')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && /[a-zA-Z]/g.test(caregiverDetail.phone1)) {\n            tempInvalidList.push('caregiverPhoneInvalid')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && caregiverDetail.phone1?.length !== 10) {\n            tempInvalidList.push('caregiverPhoneInvalid')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverDetail.phone1) {\n            tempInvalidList.push('caregiverPhone')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverDetail.email?.match(/\\S+@\\S+\\.\\S+/)) {\n            tempInvalidList.push('caregiverEmailInvalid')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverAddress.addressLine1) {\n            tempInvalidList.push('caregiverAddrLine1')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverAddress.city) {\n            tempInvalidList.push('caregiverCity')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverAddress.district) {\n            tempInvalidList.push('caregiverDistrict')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverAddress.state) {\n            tempInvalidList.push('caregiverState')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverAddress.country) {\n            tempInvalidList.push('caregiverCountry')\n            isValid = false;\n        }\n        if (userDetail.profile && userDetail.profile === profileList.find(profile => profile.name === 'Student')?._id && !caregiverAddress.zipCode) {\n            tempInvalidList.push('caregiverPinCode')\n            isValid = false;\n        }\n        if (!isValid) {\n            setInvalidList(tempInvalidList);\n        }\n        console.log('Validated' + isValid);\n        return isValid;\n    }\n\n    const initiateInsertUser = async () => {\n        handleInsertUser()\n            .then((response) => {\n                if (response.status === 200) {\n                    toast.success('New user created');\n                    console.log(userDetail)\n                    setUserDetail({ profile: userDetail?.id });\n                    setUserAddress({});\n                    if (!createOneMore) {\n                        history.goBack();\n                    }\n                }\n            })\n            .catch((error) => {\n                if (error.response?.status === 409) {\n                    setDuplicateUserId(error.response?.data?._id)\n                }\n                switch (error.response.status) {\n                    case 409:\n                        return setDuplicateUser(true)\n                    case 400:\n                        return toast.error('Something went wrong. Please try again');\n                    default:\n                        setisPageLoadingFailed(true)\n                }\n            })\n            .finally(() => {\n                setisPageLoading(false);\n            })\n    }\n\n    const handleInsertUser = async () => {\n        //Update Request\n        setisPageLoading(true);\n        unmounted = false;\n        const source = axios.CancelToken.source();\n        return await axios.post(`${process.env.REACT_APP_SERVER}/add-new-user`, {\n            userDetail: fullUserDetails,\n            caregiverDetails: fullCaregiverDetails,\n            isSameAddress\n        })\n    }\n\n    const unlinkCaregiver = () => {\n        setCaregiverAddress({});\n        setCaregiverDetail({});\n        setExistingCareTaker(false);\n    }\n\n    if (isPageLoadingFailed) {\n        return (\n            <Box style={{ paddingTop: '50%', backgroundColor: 'white' }}>\n                <Loading isPageLoading={isPageLoading} />\n            </Box>\n        )\n    }\n    else if (isPageLoading) {\n        return (\n            <Box style={{ top: '50%' }}>\n                <Loading isPageLoading={isPageLoading} />\n            </Box>\n        )\n    }\n    else {\n        return (\n            <React.Fragment>\n                {JSON.parse(localStorage.getItem('userDetail'))?.profile?.name === 'Admin' ?\n                    (<Box component=\"span\" className={classes.hideButtons}>\n                        <Grid container spacing={5}>\n                            <Grid xs={6} md={6} justifyContent='flex-end' className={classes.gridElement}>\n                                <Button variant='contained' size=\"medium\" onClick={() => { handleSave(false) }}>Save</Button>\n                            </Grid>\n                            <Grid xs={6} md={6} justifyContent='flex-start' className={classes.gridElement}>\n                                <Button variant='contained' size=\"medium\" onClick={() => { handleSave(true) }}>Save and New</Button>\n                            </Grid>\n                        </Grid>\n                    </Box>) : <span></span>\n                }\n\n                <Typography className={classes.header}>\n                    User :\n                </Typography>\n                <Container style={{ paddingTop: 30 }}>\n                    <Grid container spacing={5} className={classes.grid}>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>Name :</Typography>\n                            <TextField\n                                style={{ flex: 1 }}\n                                inputProps={{\n                                    className: classes.inputDesign\n                                }}\n                                placeholder={`User's Name`}\n                                helperText={!invalidList.includes('name') ? '' : \"Name is required\"}\n                                error={invalidList.includes('name')}\n                                onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'name')) }}\n                                value={userDetail.name || ''}\n                                id=\"name\"\n                                onChange={(name) => { setUserDetail({ ...userDetail, name: name.target.value }); }}\n                                variant=\"standard\"\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>Email :</Typography>\n                            <TextField\n                                style={{ flex: 1 }}\n                                inputProps={{\n                                    className: classes.inputDesign\n                                }}\n                                placeholder={`User's Email`}\n                                helperText={invalidList.includes('email') ? \"Email is required\" : invalidList.includes('emailInvalid') ? 'Email is invalid' : ''}\n                                error={invalidList.includes('email') || invalidList.includes('emailInvalid')}\n                                onFocus={() => { setInvalidList(invalidList.filter(value => !value.includes('email'))) }}\n                                value={userDetail.email || ''}\n                                id=\"email\"\n                                onChange={(email) => { setUserDetail({ ...userDetail, email: email.target.value }); }}\n                                aria-describedby=\"component-error-text\"\n                                variant=\"standard\"\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>Phone :</Typography>\n                            <TextField\n                                style={{ flex: 1 }}\n                                inputProps={{\n                                    className: classes.inputDesign\n                                }}\n                                placeholder={`Phone Number`}\n                                value={userDetail.phone1 || ''}\n                                id=\"phone\"\n                                helperText={invalidList.includes('phone') ? \"Phone Number is required\" : invalidList.includes('phoneInvalid') ? 'Phone Number is invalid' : ''}\n                                error={invalidList.includes('phone') || invalidList.includes('phoneInvalid')}\n                                onFocus={() => { setInvalidList(invalidList.filter(value => !value.includes('phone'))) }}\n                                onChange={(phone) => { setUserDetail({ ...userDetail, phone1: phone.target.value }); }}\n                                aria-describedby=\"component-error-text\"\n                                variant=\"standard\"\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>Profile :</Typography>\n\n                            <TextField\n                                id=\"profile\"\n                                style={{ flex: 1 }}\n                                select\n                                defaultValue={profileList[0]?._id || ''}\n                                value={\n                                    profileList.find(profile => profile._id === userDetail.profile?._id)?._id\n                                }\n                                onChange={(profileSel) => {\n                                    setUserDetail({ ...userDetail, profile: profileList.find(profile => profile._id === profileSel.target.value)?._id })\n                                    if (profileList.find(profile => profile._id === profileSel.target.value)?.name === 'Student') {\n                                        toast(\n                                            <span style={{ color: '#FF9900' }}>\n                                                <b>Student</b> profile cannot be modified, once saved!!\n                                            </span>,\n                                            {\n                                                icon: <WarningRoundedIcon style={{ color: \"#FF9900\" }} />,\n                                            }\n                                        );\n                                    }\n                                }}\n                                variant=\"standard\"\n                                inputProps={{\n                                    className: classes.inputDesign,\n                                }}\n                            >\n                                {profileList.map((option) => (\n                                    <MenuItem\n                                        classes={{\n                                            root: classes.profileSelect\n                                        }}\n                                        key={option._id} value={option._id}>\n                                        {option.name}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>DOB :</Typography>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <DesktopDatePicker\n                                    inputFormat=\"dd/MM/yyyy\"\n                                    value={userDetail.dob}\n                                    className={classes.inputDesign}\n                                    onChange={(dateOfBirth) => { setUserDetail({ ...userDetail, dob: dateOfBirth }) }}\n                                    renderInput={(params) => <TextField {...params} style={{ width: '91%' }} className={classes.dateDesign} />}\n                                />\n                            </LocalizationProvider>\n                        </Grid>\n                        {profileList.find(profile => profile._id === userDetail.profile)?.name === 'Student' &&\n                            <Grid xs={12} md={6} style={{ marginTop: 0 }} className={classes.gridElement}>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>Class :</Typography>\n                                    <TextField\n                                        id=\"class\"\n                                        style={{ flex: 1 }}\n                                        select\n                                        helperText={invalidList.includes('class') ? \"Associate student to a class\" : ''}\n                                        error={invalidList.includes('class')}\n                                        defaultValue={allClasses[1]?.id || ''}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => !value.includes('class'))) }}\n                                        value={\n                                            allClasses.find(classRec => classRec.id === userDetail?.class)?.label || allClasses.find(classRec => classRec.label === 'None')?.label\n                                        }\n                                        onChange={(classRec) => {\n                                            setUserDetail({ ...userDetail, class: allClasses.find(classInst => classInst.label === classRec.target.value)?.id, section: 'None' })\n                                        }}\n                                        variant=\"standard\"\n                                        inputProps={{\n                                            className: classes.inputDesign,\n                                        }}\n                                    >\n                                        {allClasses.map((option) => (\n                                            <MenuItem\n                                                classes={{\n                                                    root: classes.profileSelect\n                                                }}\n                                                key={option.id} value={option.label}>\n                                                {option.label}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>Section :</Typography>\n                                    <TextField\n                                        id=\"class\"\n                                        style={{ flex: 1 }}\n                                        select\n                                        defaultValue={allClasses[0]?.sections[0] || 'None'}\n                                        helperText={invalidList.includes('section') ? \"Select a section\" : ''}\n                                        error={invalidList.includes('section')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => !value.includes('section'))) }}\n                                        value={\n                                            userDetail.section || allClasses.find(classRec => classRec.label === 'None')?.sections[0]\n                                        }\n                                        onChange={(classRec) => {\n                                            setUserDetail({ ...userDetail, section: classRec.target.value })\n                                        }}\n                                        variant=\"standard\"\n                                        inputProps={{\n                                            className: classes.inputDesign,\n                                        }}\n                                    >\n                                        {allClasses.find(classRec => classRec.id === userDetail.class)?.sections.map((option) => (\n                                            <MenuItem\n                                                classes={{\n                                                    root: classes.profileSelect\n                                                }}\n                                                key={option} value={option}>\n                                                {option || 'None'}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                        }\n                    </Grid>\n                </Container>\n                <Typography className={classes.header}>\n                    Address :\n                </Typography>\n                <Container style={{ paddingTop: 30 }}>\n                    <Grid container spacing={5} className={classes.grid}>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={[classes.label, classes.addressLine]}>Address Line 1 :</Typography>\n                            <TextField\n                                style={{ flex: 1 }}\n                                inputProps={{\n                                    className: classes.inputDesign\n                                }}\n                                placeholder={`Address Line 1`}\n                                value={userAddress?.addressLine1 || ''}\n                                id=\"addressLine1\"\n                                helperText={!invalidList.includes('addrLine1') ? '' : \"Address Line 1 is required\"}\n                                onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'addrLine1')) }}\n                                error={invalidList.includes('addrLine1')}\n                                onChange={(addressLine1) => { handleuserAddressLine1Change(addressLine1) }}\n                                variant=\"standard\"\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={[classes.label, classes.addressLine]}>Address Line 2 :</Typography>\n                            <TextField\n                                style={{ flex: 1 }}\n                                inputProps={{\n                                    className: classes.inputDesign\n                                }}\n                                placeholder={`Address Line 2`}\n                                value={userAddress?.addressLine2 || ''}\n                                id=\"addressLine2\"\n                                onChange={(addressLine2) => { handleuserAddressLine2Change(addressLine2) }}\n                                variant=\"standard\"\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>City :</Typography>\n                            <TextField\n                                style={{ flex: 1 }}\n                                inputProps={{\n                                    className: classes.inputDesign\n                                }}\n                                placeholder={`City`}\n                                value={userAddress?.city || ''}\n                                id=\"city\"\n                                helperText={!invalidList.includes('city') ? '' : \"City is required\"}\n                                error={invalidList.includes('city')}\n                                onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'city')) }}\n                                onChange={(city) => { handleUserCityChange(city) }}\n                                variant=\"standard\"\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>District :</Typography>\n                            <TextField\n                                style={{ flex: 1 }}\n                                inputProps={{\n                                    className: classes.inputDesign\n                                }}\n                                placeholder={`District`}\n                                value={userAddress?.district || ''}\n                                helperText={!invalidList.includes('district') ? '' : \"District is required\"}\n                                error={invalidList.includes('district')}\n                                onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'district')) }}\n                                id=\"district\"\n                                onChange={(district) => { handleUserDistrictChange(district) }}\n                                variant=\"standard\"\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>State :</Typography>\n                            <Autocomplete\n                                sx={{ width: 355, bottom: 5, position: 'relative', marginLeft: '8px' }}\n                                options={selectedCountry?.states || []}\n                                autoHighlight\n                                //value={selectedCountry || {}}\n                                getOptionLabel={(option) => option.name || ''}\n                                id=\"state\"\n                                onChange={(event, value) => { handleUserStateChange(value) }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        variant=\"standard\"\n                                        required\n                                        helperText={!invalidList.includes('state') ? '' : \"Invalid state value\"}\n                                        error={invalidList.includes('state')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'state')) }}\n                                        fullWidth\n                                        id={`state`}\n                                        placeholder=\"State\"\n                                    />\n                                )}\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>Country :</Typography>\n                            <Autocomplete\n                                sx={{ width: 355, bottom: 5, position: 'relative', marginLeft: '8px' }}\n                                options={countryDetails}\n                                autoHighlight\n                                value={selectedCountry || {}}\n                                getOptionLabel={(option) => option.name || ''}\n                                id=\"country\"\n                                onChange={(event, value) => { \n                                    setUserAddress({\n                                        ...userAddress,\n                                        state: ''\n                                    });\n                                    handleUserCountryChange(value) \n                                }}\n                                renderOption={(props, option) => (\n                                    <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0, margin: 5 } }} {...props}>\n                                        <img\n                                            loading=\"lazy\"\n                                            width=\"20\"\n                                            src={`https://flagcdn.com/w20/${option.iso2.toLowerCase()}.png`}\n                                            srcSet={`https://flagcdn.com/w40/${option.iso2.toLowerCase()}.png 2x`}\n                                            alt=\"\"\n                                        />\n                                        {option.name} ({option.iso3}) +{option.phone_code}\n                                    </Box>\n                                )}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        variant=\"standard\"\n                                        required\n                                        helperText={!invalidList.includes('country') ? '' : \"Country is required\"}\n                                        error={invalidList.includes('country')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'country')) }}\n                                        fullWidth\n                                        id={`event-type`}\n                                        placeholder=\"Country\"\n                                    />\n                                )}\n                            />\n                        </Grid>\n                        <Grid xs={12} md={6} className={classes.gridElement}>\n                            <Typography className={classes.label}>PIN Code :</Typography>\n                            <TextField\n                                style={{ flex: 1 }}\n                                inputProps={{\n                                    className: classes.inputDesign\n                                }}\n                                placeholder={`PIN Code`}\n                                value={userAddress?.zipCode || ''}\n                                id=\"zipCode\"\n                                helperText={!invalidList.includes('pinCode') ? '' : \"Pin Code is required\"}\n                                error={invalidList.includes('pinCode')}\n                                onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'pinCode')) }}\n                                onChange={(zipCode) => { handleUserZipCodeChange(zipCode) }}\n                                variant=\"standard\"\n                            />\n                        </Grid>\n                    </Grid>\n                </Container>\n                {\n                    profileList.find(profile => profile._id === userDetail.profile)?.name === 'Student' &&\n                    <span>\n                        <Typography style={{ marginTop: 20 }} className={classes.header}>\n                            Caregiver Information :\n                        </Typography>\n                        <Box component=\"span\">\n                            <Grid container spacing={5}>\n                                <Grid xs={12} md={12} justifyContent='center' style={{ marginTop: 35 }} className={classes.gridElement}>\n                                    <Button color='inherit' variant='contained' size=\"small\" onClick={() => { !existingCareTaker ? setShowExistingCaregiver(true) : unlinkCaregiver() }}>{!existingCareTaker ? 'Link existing caregiver' : 'Unlink caregiver'}</Button>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                        <Container style={{ paddingTop: 30 }}>\n                            <Grid container spacing={5} className={classes.grid}>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>Name :</Typography>\n                                    <TextField\n                                        style={{ flex: 1 }}\n                                        inputProps={{\n                                            className: classes.inputDesign\n                                        }}\n                                        disabled={existingCareTaker}\n                                        placeholder={`Caregiver Name`}\n                                        helperText={!invalidList.includes('caregiverName') ? '' : \"Name is required\"}\n                                        error={invalidList.includes('name')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'caregiverName')) }}\n                                        value={caregiverDetail?.name || ''}\n                                        id=\"caregiverName\"\n                                        onChange={(name) => { setCaregiverDetail({ ...caregiverDetail, name: name.target.value }) }}\n                                        variant=\"standard\"\n                                    />\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>Email :</Typography>\n                                    <TextField\n                                        style={{ flex: 1 }}\n                                        inputProps={{\n                                            className: classes.inputDesign\n                                        }}\n                                        disabled={existingCareTaker}\n                                        placeholder={`Caregiver Email`}\n                                        helperText={invalidList.includes('caregiverEmail') ? \"Email is required\" : invalidList.includes('emailInvalid') ? 'Email is invalid' : ''}\n                                        error={invalidList.includes('caregiverEmail') || invalidList.includes('caregiverEmailInvalid')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => !value.includes('caregiverEmail'))) }}\n                                        value={caregiverDetail?.email || ''}\n                                        id=\"caregiverEmail\"\n                                        onChange={(email) => { setCaregiverDetail({ ...caregiverDetail, email: email.target.value }) }}\n                                        aria-describedby=\"component-error-text\"\n                                        variant=\"standard\"\n                                    />\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>Phone :</Typography>\n                                    <TextField\n                                        style={{ flex: 1 }}\n                                        inputProps={{\n                                            className: classes.inputDesign\n                                        }}\n                                        disabled={existingCareTaker}\n                                        placeholder={`Phone Number`}\n                                        value={caregiverDetail?.phone1 || ''}\n                                        id=\"caregiverPhone\"\n                                        helperText={invalidList.includes('caregiverPhone') ? \"Phone Number is required\" : invalidList.includes('phoneInvalid') ? 'Phone Number is invalid' : ''}\n                                        error={invalidList.includes('caregiverPhone') || invalidList.includes('caregiverPhoneInvalid')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => !value.includes('caregiverPhone'))) }}\n                                        onChange={(phone) => { setCaregiverDetail({ ...caregiverDetail, phone1: phone.target.value }) }}\n                                        aria-describedby=\"component-error-text\"\n                                        variant=\"standard\"\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Container>\n                        <Typography style={{ marginTop: 20 }} className={classes.header}>\n                            Caregiver Address :\n                        </Typography>\n                        <Container style={{ paddingTop: 30 }}>\n                            <Grid container spacing={5} style={{ marginBottom: 10 }} className={classes.grid}>\n                                <Typography style={{ paddingTop: 7, fontWeight: 800 }} className={[classes.label, classes.addressLine]}>Same as Student Address :</Typography>\n                                <Checkbox color=\"success\" disabled={existingCareTaker} onChange={(changeVal) => {\n                                    if (changeVal.target.checked) {\n                                        setIsSameAddress(true)\n                                        setCaregiverAddress({ ...userAddress })\n                                    }\n                                    else {\n                                        setIsSameAddress(false)\n                                        setCaregiverAddress({})\n                                    }\n                                }} />\n                            </Grid>\n                            <Grid container spacing={5} className={classes.grid}>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={[classes.label, classes.addressLine]}>Address Line 1 :</Typography>\n                                    <TextField\n                                        style={{ flex: 1 }}\n                                        inputProps={{\n                                            className: classes.inputDesign\n                                        }}\n                                        disabled={isSameAddress || existingCareTaker}\n                                        placeholder={`Address Line 1`}\n                                        value={caregiverAddress?.addressLine1 || ''}\n                                        id=\"caregiverAddrLine1\"\n                                        helperText={!invalidList.includes('caregiverAddrLine1') ? '' : \"Address Line 1 is required\"}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'caregiverAddrLine1')) }}\n                                        error={invalidList.includes('caregiverAddrLine1')}\n                                        onChange={(addressLine1) => { setCaregiverAddress({ ...caregiverAddress, addressLine1: addressLine1.target.value }) }}\n                                        variant=\"standard\"\n                                    />\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={[classes.label, classes.addressLine]}>Address Line 2 :</Typography>\n                                    <TextField\n                                        style={{ flex: 1 }}\n                                        inputProps={{\n                                            className: classes.inputDesign\n                                        }}\n                                        disabled={isSameAddress || existingCareTaker}\n                                        placeholder={`Address Line 2`}\n                                        value={caregiverAddress?.addressLine2 || ''}\n                                        id=\"caregiverAddressLine2\"\n                                        onChange={(addressLine2) => { setCaregiverAddress({ ...caregiverAddress, addressLine2: addressLine2.target.value }) }}\n                                        variant=\"standard\"\n                                    />\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>City :</Typography>\n                                    <TextField\n                                        style={{ flex: 1 }}\n                                        inputProps={{\n                                            className: classes.inputDesign\n                                        }}\n                                        disabled={isSameAddress || existingCareTaker}\n                                        placeholder={`City`}\n                                        value={caregiverAddress?.city || ''}\n                                        id=\"caregiverCity\"\n                                        helperText={!invalidList.includes('caregiverCity') ? '' : \"City is required\"}\n                                        error={invalidList.includes('caregiverCity')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'caregiverCity')) }}\n                                        onChange={(city) => { setCaregiverAddress({ ...caregiverAddress, city: city.target.value }) }}\n                                        variant=\"standard\"\n                                    />\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>District :</Typography>\n                                    <TextField\n                                        style={{ flex: 1 }}\n                                        inputProps={{\n                                            className: classes.inputDesign\n                                        }}\n                                        disabled={isSameAddress || existingCareTaker}\n                                        placeholder={`District`}\n                                        value={caregiverAddress?.district || ''}\n                                        helperText={!invalidList.includes('caregiverDistrict') ? '' : \"District is required\"}\n                                        error={invalidList.includes('caregiverDistrict')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'caregiverDistrict')) }}\n                                        id=\"caregiverDistrict\"\n                                        onChange={(district) => { setCaregiverAddress({ ...caregiverAddress, district: district.target.value }) }}\n                                        variant=\"standard\"\n                                    />\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>State :</Typography>\n                                    <Autocomplete\n                                        sx={{ width: 355, bottom: 5, position: 'relative', marginLeft: '8px' }}\n                                        options={selectedCaregiverCountry.states || []}\n                                        autoHighlight\n                                        //value={selectedCountry || {}}\n                                        getOptionLabel={(option) => option.name || ''}\n                                        id=\"state\"\n                                        onChange={(event, value) => { setCaregiverAddress({ ...caregiverAddress, state: value.name }) }}\n                                        renderInput={(params) => (\n                                            <TextField\n                                                {...params}\n                                                variant=\"standard\"\n                                                required\n                                                helperText={!invalidList.includes('caregiverState') ? '' : \"Invalid state value\"}\n                                                error={invalidList.includes('caregiverState')}\n                                                onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'caregiverState')) }}\n                                                fullWidth\n                                                id={`caregiverState`}\n                                                placeholder=\"Country\"\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>Country :</Typography>\n                                    <Autocomplete\n                                        sx={{ width: 355, bottom: 5, position: 'relative', marginLeft: '8px' }}\n                                        options={countryDetails}\n                                        autoHighlight\n                                        value={selectedCaregiverCountry || {}}\n                                        getOptionLabel={(option) => option.name || ''}\n                                        id=\"country\"\n                                        onChange={(event, value) => {\n                                            setCaregiverAddress({ ...caregiverAddress, state: '' })\n                                            setSelectedCaregiverCountry(value)\n                                            setCaregiverAddress({ ...caregiverAddress, country: value.name })\n                                        }}\n                                        renderOption={(props, option) => (\n                                            <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0, margin: 5 } }} {...props}>\n                                                <img\n                                                    loading=\"lazy\"\n                                                    width=\"20\"\n                                                    src={`https://flagcdn.com/w20/${option.iso2.toLowerCase()}.png`}\n                                                    srcSet={`https://flagcdn.com/w40/${option.iso2.toLowerCase()}.png 2x`}\n                                                    alt=\"\"\n                                                />\n                                                {option.name} ({option.iso3}) +{option.phone_code}\n                                            </Box>\n                                        )}\n                                        renderInput={(params) => (\n                                            <TextField\n                                                {...params}\n                                                variant=\"standard\"\n                                                required\n                                                helperText={!invalidList.includes('caregiverCountry') ? '' : \"Country is required\"}\n                                                error={invalidList.includes('caregiverCountry')}\n                                                onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'caregiverCountry')) }}\n                                                fullWidth\n                                                id={`caregiverCountry`}\n                                                placeholder=\"Country\"\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid xs={12} md={6} className={classes.gridElement}>\n                                    <Typography className={classes.label}>PIN Code :</Typography>\n                                    <TextField\n                                        style={{ flex: 1 }}\n                                        inputProps={{\n                                            className: classes.inputDesign\n                                        }}\n                                        disabled={isSameAddress || existingCareTaker}\n                                        placeholder={`PIN Code`}\n                                        value={caregiverAddress?.zipCode || ''}\n                                        id=\"caregiverPinCode\"\n                                        helperText={!invalidList.includes('caregiverPinCode') ? '' : \"Pin Code is required\"}\n                                        error={invalidList.includes('caregiverPinCode')}\n                                        onFocus={() => { setInvalidList(invalidList.filter(value => value !== 'caregiverPinCode')) }}\n                                        onChange={(zipCode) => { setCaregiverAddress({ ...caregiverAddress, zipCode: zipCode.target.value }) }}\n                                        variant=\"standard\"\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Container>\n                    </span>\n                }\n                <Toaster />\n                <Dialog\n                    open={duplicateUser}\n                    onClose={() => { }}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        {`Duplicate user found!`}\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            An user with {userDetail.email} is found in the organization.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            onClick={() => {\n                                setDuplicateUser(false)\n                            }}>Cancel</Button>\n                        <Button onClick={() => {\n                            setDuplicateUser(false)\n                            setshowDuplicateUser(true);\n                        }} autoFocus>\n                            Show Details!\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n                <Dialog open={showExistingCaregiver} onClose={() => { setShowExistingCaregiver(false) }}>\n                    <DialogTitle>Select Caregiver</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Please enter the email of existing Caregiver:\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Email Address\"\n                            type=\"email\"\n                            value={findCaregiverEmail}\n                            fullWidth\n                            onChange={(email) => { setFindCaregiverEmail(email.target.value) }}\n                            variant=\"standard\"\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => { setShowExistingCaregiver(false) }}>Cancel</Button>\n                        <Button onClick={getCaregiverByEmail}>Find</Button>\n                    </DialogActions>\n                </Dialog>\n\n                <Modal\n                    open={showDuplicateUser}\n                    onClose={() => { setshowDuplicateUser(false) }}\n                    aria-labelledby=\"modal-modal-title\"\n                    aria-describedby=\"modal-modal-description\"\n                >\n                    <Box className={classes.modalDesign}>\n                        <UserDetail userId={duplicateUserId} hideButtons={true} />\n                    </Box>\n                </Modal>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default NewUser"],"names":["useStyles","makeStyles","theme","gridElement","margin","display","padding","breakpoints","down","hideButtons","header","backgroundColor","color","palette","common","white","marginTop","profileSelect","top","checkboxDesign","addressLine","width","inputDesign","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","autoComplete","bottom","marginLeft","dateDesign","grid","flex","flexDirection","label","grey","modalDesign","position","left","transform","maxWidth","history","useHistory","classes","unmounted","React","isPageLoading","setisPageLoading","isPageLoadingFailed","setisPageLoadingFailed","invalidList","setInvalidList","dob","Date","userDetail","setUserDetail","userAddress","setUserAddress","profileList","setProfileList","createOneMore","setCreateOneMore","duplicateUser","setDuplicateUser","fullUserDetails","setFullUserDetails","fullCaregiverDetails","setFullCaregiverDetails","showDuplicateUser","setshowDuplicateUser","duplicateUserId","setDuplicateUserId","allClasses","setAllClasses","caregiverDetail","setCaregiverDetail","caregiverAddress","setCaregiverAddress","isSameAddress","setIsSameAddress","showExistingCaregiver","setShowExistingCaregiver","findCaregiverEmail","setFindCaregiverEmail","existingCareTaker","setExistingCareTaker","countryDetails","setCountryDetails","selectedCountry","setSelectedCountry","selectedCaregiverCountry","setSelectedCaregiverCountry","useEffect","getAllProfiles","getAllClasses","getCountryDetails","address","initiateInsertUser","find","country","iso3","source","axios","process","then","countryInfo","tempCountryList","data","forEach","push","catch","error","console","log","toast","finally","cancel","response","status","classData","classRec","name","id","_id","sections","getClassSection","divisions","class","request","localStorage","removeItem","replace","go","i","length","String","fromCharCode","charCodeAt","profile","getCaregiverByEmail","match","JSON","stringify","caregiverDetails","handleSave","createNewUser","validate","isValid","tempInvalidList","phone1","test","email","section","addressLine1","city","district","state","zipCode","handleInsertUser","goBack","Box","style","paddingTop","Loading","parse","getItem","component","className","Grid","container","spacing","xs","md","justifyContent","Button","variant","size","onClick","Typography","Container","TextField","inputProps","placeholder","helperText","includes","onFocus","filter","value","onChange","target","phone","select","defaultValue","profileSel","icon","WarningRounded","map","option","MenuItem","root","LocalizationProvider","dateAdapter","AdapterDateFns","DesktopDatePicker","inputFormat","dateOfBirth","renderInput","params","classInst","handleuserAddressLine1Change","addressLine2","handleuserAddressLine2Change","handleUserCityChange","handleUserDistrictChange","Autocomplete","sx","options","states","autoHighlight","getOptionLabel","event","required","fullWidth","renderOption","props","mr","flexShrink","loading","src","iso2","toLowerCase","srcSet","alt","phone_code","handleUserZipCodeChange","disabled","marginBottom","Checkbox","changeVal","checked","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","type","Modal","UserDetail","userId"],"sourceRoot":""}